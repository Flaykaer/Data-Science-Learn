Теория

Прочитать в учебнике по JavaScript разделы:

«ООП в функциональном стиле»;

«ООП в прототипном стиле».


Практика

Создать иерархию сущностей (конструкторов, из которых можно создать экземпляры объектов):

базовый конструктор «Транспортное средство» с общими для всех транспортных средств свойствами и методами (на ваше усмотрение);

дочерние конструкторы: автомобиль, самолет, корабль, которые наследуют общие свойства и методы от родительского;

продемонстрировать, как дочерние сущности могут переопределять родительские свойства и методы в соответствии со своим собственным поведением.
class Machine{
    constructor(name,engine,wheel= 0,seats,maxMph) {
        this.name = name
        this.engine = engine;
        this.wheel = wheel;
        this.seats = seats;
        this.maxMph = maxMph;

    }
    say(){
        return this.name + " " + this.engine + " " +this.wheel + " " +this.seats + " " + this.maxMph
}
}
class Car extends Machine{
    constructor(name,engine,wheel,seats,maxMph,body,color,driveUnit){
        super(name,engine,wheel,seats,maxMph);
        this.body = body;
        this.color = color;
        this.driveUnit = driveUnit;

    }
    say(){

        let sayCar = super.say() + this.body + " " +this.color + " " +this.driveUnit
        alert(sayCar)
    }
}
class Ship extends Machine{
    constructor(name,engine,seats,maxMph,loadCapacity,
                sail){
        super(name,engine,seats,maxMph);
        this.loadCapacity = loadCapacity;
        this.sail = sail;
    }
}
class Plane extends Machine{
    constructor(name,engine,seats,maxMph,maxHeight) {
        super(name,engine,seats,maxMph);
        this.maxHeight = maxHeight;
    }
    }
const aveo = new Car("chevrolet","petrol",'4','4',193,"sedan",'gray','front')
aveo.say()
